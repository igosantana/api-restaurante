basePath: /api
definitions:
  models.CreateProductForm:
    type: object
  models.ToCreateUser:
    properties:
      email:
        maxLength: 110
        type: string
      name:
        maxLength: 110
        minLength: 3
        type: string
      password:
        maxLength: 8
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UpdateProduct:
    properties:
      category:
        maxLength: 110
        type: string
      description:
        maxLength: 250
        type: string
      name:
        maxLength: 110
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  models.UserLogin:
    properties:
      email:
        maxLength: 110
        type: string
      password:
        maxLength: 8
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.UserUpdate:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  response.ErrorDetail:
    properties:
      errorMessage:
        type: string
      errorType:
        type: string
      field:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        items:
          $ref: '#/definitions/response.ErrorDetail'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: A Restaurant service API in Go using Gin framework
  title: Restaurant service API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: User Login. Set cookie with name `Authorization`. You need to include
        this cookie in subsequent requests.
      parameters:
      - description: A JSON object containing the email and password.
        in: body
        name: Email/Password
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: The session ID is returned in a cookie named `Authentication`.
            You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              description: 'example: Authorization=abcde12345; Path=/; HttpOnly'
              type: string
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logs in and returns the authentication cookie
      tags:
      - Auth
  /auth/logout:
    get:
      description: Logos out user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Users Logout
      tags:
      - Auth
  /product:
    get:
      description: Get all products data in DB.
      parameters:
      - description: Get products by name
        in: query
        name: name
        type: string
      - description: Get products by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A JSON with products
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - multipart/form-data
      description: Save products data in DB. Only Admin or Owner.
      parameters:
      - description: A JSON form object containing the products requirements
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create products
      tags:
      - Product
  /product/{id}:
    delete:
      description: Remove products data in DB. Only Admin or Owner.
      parameters:
      - description: Remove product by id.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Product
    patch:
      description: Update and Save products data in DB. Only Admin or Owner.
      parameters:
      - description: A JSON form object containing the products requirements
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProduct'
      - description: Update product by id.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update products
      tags:
      - Product
  /user:
    get:
      description: Get all users. Only Admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - cookieAuth: []
      summary: Get all users
      tags:
      - User
    post:
      description: Save users data in DB
      parameters:
      - description: Create user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.ToCreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create users
      tags:
      - User
  /user/{id}:
    delete:
      description: Remove users data by id. Only Admin or Owner.
      parameters:
      - description: remove user by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - cookieAuth: []
      summary: Delete users
      tags:
      - User
    get:
      description: Get user by id. Only Admin or Owner.
      parameters:
      - description: Get user by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - cookieAuth: []
      summary: Get one user
      tags:
      - User
    patch:
      description: update user and save in DB. Only Admin or Owner.
      parameters:
      - description: update user by id
        in: path
        name: id
        required: true
        type: string
      - description: update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - cookieAuth: []
      summary: Update users
      tags:
      - User
swagger: "2.0"
